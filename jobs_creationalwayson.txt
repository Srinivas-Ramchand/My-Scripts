CREATE TABLE  #names (id int identity(1,1),name varchar(200))

INSERT INTO  #names SELECT name FROM   msdb.dbo.sysjobs WHERE  [enabled]=1

 --select * from #names

   DECLARE  @minid INT

   DECLARE @maxid INT

   SELECT  @minid=min(id) FROM #names

   SELECT  @maxid=max(id) FROM  #names

    WHILE  (@minid<=@maxid)

      BEGIN 

      DECLARE   @jobname nvarchar(128)

     SELECT  @jobname= name FROM #names WHERE id=@minid

     

      DECLARE @jobid uniqueidentifier = (SELECT  sj.job_id FROM msdb.dbo.sysjobs sj WHERE  sj.name = @jobname)

 

 IF not exists(select * from msdb.dbo.sysjobsteps where job_id = @jobid and step_name = 'Check If AG Primary' )

 

BEGIN 

       -- Add new first step: on success go to next step, on failure quit reporting success

       exec msdb.dbo.sp_add_jobstep 

         @job_id = @jobid

       , @step_id = 1

       , @cmdexec_success_code = 0

       , @step_name = 'Check If AG Primary'

       , @on_success_action = 3  -- On success, go to Next Step

       , @on_success_step_id = 2

       , @on_fail_action = 1     -- On failure, Quit with Success  

       , @on_fail_step_id = 0

       , @retry_attempts = 0

       , @retry_interval = 0

       , @os_run_priority = 0

       , @subsystem = N'TSQL'

       , @command=N'IF (SELECT ars.role_desc

       FROM sys.dm_hadr_availability_replica_states ars

       JOIN sys.availability_groups ag ON ars.group_id = ag.group_id AND ars.is_local = 1) <> ''Primary''

   BEGIN

      -- Secondary node, throw an error

      raiserror (''Not the AG primary'', 2, 1)

   END'

       , @database_name=N'master'

       , @flags=0

   END

                SET @minid=@minid+1

 

END